@echo off
REM =====================================================
REM MUTANTE AUTO-STARTUP INSTALLER - C VERSION
REM Para seu projeto atual - SEM C++
REM =====================================================

title Mutante Auto-Startup Installer (C Version)

echo ========================================
echo   MUTANTE AUTO-STARTUP INSTALLER
echo   C VERSION (NO C++ PROBLEMS)
echo ========================================
echo.

echo [INFO] This version uses pure C to avoid C++ compilation issues
echo [INFO] Adds auto-startup to your CURRENT project without changes
echo.

pause

echo.
echo [INFO] Checking your current project files...

REM Verificar arquivos do projeto atual
if exist "mutante.sys" (
    echo [OK] mutante.sys found - your compiled driver
) else (
    echo [WARNING] mutante.sys not found
    echo [INFO] Make sure your project is compiled first
)

if exist "kdmapper.exe" (
    echo [OK] kdmapper.exe found - your current loader
) else (
    echo [ERROR] kdmapper.exe not found!
    echo [ERROR] This is required for loading the driver
    pause
    exit /b 1
)

echo.
echo [INFO] Checking for C loader source...

if exist "mutante_loader.c" (
    echo [OK] mutante_loader.c found
) else (
    echo [ERROR] mutante_loader.c source file not found!
    echo [ERROR] Please create the mutante_loader.c file first
    echo [ERROR] Use the C code provided (not C++)
    pause
    exit /b 1
)

echo.
echo [INFO] Attempting to compile C loader...

REM Tentar múltiplos métodos de compilação
set COMPILED=0

REM Método 1: gcc (MinGW)
echo [INFO] Trying: gcc (MinGW)...
gcc -o mutante_loader.exe mutante_loader.c -lkernel32 -ladvapi32 -static >nul 2>&1
if exist "mutante_loader.exe" (
    echo [OK] Successfully compiled with gcc!
    set COMPILED=1
    goto :compiled
)

REM Método 2: cl (Visual Studio)
echo [INFO] Trying: cl (Visual Studio)...
cl /Fe:mutante_loader.exe mutante_loader.c kernel32.lib advapi32.lib >nul 2>&1
if exist "mutante_loader.exe" (
    echo [OK] Successfully compiled with Visual Studio cl!
    set COMPILED=1
    goto :compiled
)

REM Método 3: tcc (Tiny C Compiler)
echo [INFO] Trying: tcc (if available)...
tcc -o mutante_loader.exe mutante_loader.c >nul 2>&1
if exist "mutante_loader.exe" (
    echo [OK] Successfully compiled with tcc!
    set COMPILED=1
    goto :compiled
)

:not_compiled
echo [ERROR] Failed to compile mutante_loader.c automatically
echo.
echo MANUAL COMPILATION OPTIONS:
echo.
echo METHOD 1 - MinGW/GCC:
echo 1. Install MinGW-w64: https://www.mingw-w64.org/downloads/
echo 2. Add to PATH: C:\mingw64\bin
echo 3. Run: gcc -o mutante_loader.exe mutante_loader.c -lkernel32 -ladvapi32 -static
echo.
echo METHOD 2 - Visual Studio:
echo 1. Open "Developer Command Prompt for VS"
echo 2. Run: cl /Fe:mutante_loader.exe mutante_loader.c kernel32.lib advapi32.lib
echo.
echo METHOD 3 - Online Compiler:
echo 1. Use online C compiler
echo 2. Compile mutante_loader.c
echo 3. Download mutante_loader.exe
echo.
pause
exit /b 1

:compiled
echo.
echo [INFO] Testing compiled loader...

REM Testar o executável
mutante_loader.exe /help >nul 2>&1
if %errorLevel% == 0 (
    echo [OK] mutante_loader.exe working correctly
) else (
    echo [WARNING] mutante_loader.exe may have issues
)

echo.
echo [INFO] Installing auto-startup...

REM Instalar auto-startup
mutante_loader.exe /install

if %errorLevel% == 0 (
    echo [OK] Auto-startup installed successfully!
) else (
    echo [ERROR] Failed to install auto-startup
    echo [ERROR] Try running this script as Administrator
    pause
    exit /b 1
)

echo.
echo [INFO] Testing manual execution...

REM Testar execução manual
echo [INFO] Running manual test of your spoofer...
echo [INFO] This will execute your current driver once...
echo.

mutante_loader.exe

echo.
echo ========================================
echo      INSTALLATION COMPLETED!
echo ========================================
echo.
echo [SUCCESS] C version compiled and installed successfully!
echo [SUCCESS] No C++ library conflicts!
echo [SUCCESS] Auto-startup added to your existing project!
echo.
echo HOW IT WORKS:
echo 1. Every Windows boot:
echo    - mutante_loader.exe runs automatically (C version)
echo    - Calls: kdmapper.exe mutante.sys (your current setup)
echo    - Your driver executes exactly as before
echo    - New random UUID generated by your existing code
echo    - Program exits until next boot
echo.
echo 2. Your current project:
echo    - main.cpp: UNCHANGED
echo    - smbios.cpp: UNCHANGED
echo    - All your code: UNCHANGED
echo    - Just added C loader for auto-execution
echo.
echo IMMEDIATE TESTING:
echo - Check current UUID: wmic csproduct get uuid
echo - Manual test: mutante_loader.exe
echo - Check logs: type auto_loader.log
echo - Execution info: type last_auto_execution.txt
echo.
echo BOOT TESTING:
echo 1. Reboot your computer
echo 2. Wait 30 seconds after boot
echo 3. Check UUID: wmic csproduct get uuid
echo 4. Should be different from current UUID
echo 5. Check logs to verify auto-execution
echo.
echo CONTROL COMMANDS:
echo - Manual run: mutante_loader.exe
echo - Silent run: mutante_loader.exe /silent
echo - Remove startup: mutante_loader.exe /uninstall
echo - Help: mutante_loader.exe /help
echo.
echo LOG FILES:
echo - auto_loader.log (execution log)
echo - last_auto_execution.txt (last run info)
echo - Use DebugView for [MAIN] driver logs
echo.
echo ========================================

echo.
echo [INFO] Current UUID (before reboot test):
wmic csproduct get uuid

echo.
echo Installation complete! C version successfully installed.
echo Your project now has auto-startup capability without C++ issues.
echo Reboot to test automatic UUID randomization on boot.
echo.
pause